// <auto-generated />
using System;
using CineTrackBE.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CineTrackBE.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250821160935_AddTestUser")]
    partial class AddTestUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CineTrackBE.Models.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "id-Juzba",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "",
                            Email = "Juzba@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JUZBA@GMAIL.COM",
                            NormalizedUserName = "JUZBA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOadgFzBJnpnkBkmi8SqFcuYgy60qk0ZBrgllZ0PPoVBypQav6KsXimrjBfiPVo6Mw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Juzba@gmail.com"
                        },
                        new
                        {
                            Id = "id-Katka",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "",
                            Email = "Katka@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KATKA@GMAIL.COM",
                            NormalizedUserName = "KATKA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJaTtbyo9uZ+7zhBsqPgOSRVqq81uC1HilQAFs30aTxQs18hzOp3e9o7jZMtt3nTow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Katka@gmail.com"
                        },
                        new
                        {
                            Id = "id-Karel",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "",
                            Email = "Karel@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KAREL@GMAIL.COM",
                            NormalizedUserName = "KAREL@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI3e/eOUTskYsHiohjGn7iVPezNTxmLT5XjporF7MfKyPsdcioNgrAJkTmk5H1c+IQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Karel@gmail.com"
                        },
                        new
                        {
                            Id = "id-Test",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "",
                            Email = "Test@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@GMAIL.COM",
                            NormalizedUserName = "TEST@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBvAv3CvOSPyH4EJPSccHhl/yxgkUq0IjtRpyhwgHEnj4u855YIIotXad9BCghJ4nQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Test@gmail.com"
                        });
                });

            modelBuilder.Entity("CineTrackBE.Models.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AutorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.Property<int>("ParrentCommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.HasIndex("ParrentCommentId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CineTrackBE.Models.Entities.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Films");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Sledujeme mladé rekruty v boji proti mimozemským pavoukům, zatímco režisér Paul Verhoeven chytře kritizuje militarismus a propagandu.",
                            Director = "Paul Verhoeven",
                            ImageFileName = "StarshipTroopers.jpg",
                            Name = "Hvězdná pěchota",
                            ReleaseDate = new DateTime(1997, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Description = "Bývalý nájemný vrah John Wick rozpoutá krvavou cestu pomsty poté, co mu ruští gangsteři ukradnou auto a zabijí jeho milovaného psa, poslední dar od jeho zesnulé ženy.",
                            Director = "Chad Stahelski",
                            ImageFileName = "JohnWick.jpg",
                            Name = "John Wick",
                            ReleaseDate = new DateTime(2014, 12, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Description = "Dom Cobb je zručný zloděj, který krade tajemství z podvědomí během snění. Dostává nabídku na poslední job, který by mu mohl vrátit jeho starý život.",
                            Director = "Christopher Nolan",
                            ImageFileName = "Inception.jpg",
                            Name = "Inception",
                            ReleaseDate = new DateTime(2010, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Description = "Kultovní film Quentina Tarantina propojuje několik příběhů zločinců v Los Angeles.",
                            Director = "Quentin Tarantino",
                            ImageFileName = "PulpFiction.jpg",
                            Name = "Pulp Fiction",
                            ReleaseDate = new DateTime(1994, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Description = "Dva uvěznění muži během několika let najdou útěchu a případné vykoupení skrze činy obyčejné slušnosti.",
                            Director = "Frank Darabont",
                            ImageFileName = "ShawshankRedemption.jpg",
                            Name = "The Shawshank Redemption",
                            ReleaseDate = new DateTime(1994, 9, 23, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            Description = "Batman, Gordon a Harvey Dent jsou nuceni čelit chaosu rozpoutanému v Gothamu anarchistickým kriminálním géniem známým jako Joker.",
                            Director = "Christopher Nolan",
                            ImageFileName = "DarkKnight.jpg",
                            Name = "The Dark Knight",
                            ReleaseDate = new DateTime(2008, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            Description = "Příběh Forresta Gumpa, muže s nízkým IQ, který se nevědomky účastní mnoha historických událostí ve 20. století.",
                            Director = "Robert Zemeckis",
                            ImageFileName = "ForrestGump.jpg",
                            Name = "Forrest Gump",
                            ReleaseDate = new DateTime(1994, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            Description = "Programátor počítačů objeví šokující pravdu o realitě a svém místě v ní.",
                            Director = "The Wachowskis",
                            ImageFileName = "Matrix.jpg",
                            Name = "The Matrix",
                            ReleaseDate = new DateTime(1999, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            Description = "V německy okupovaném Polsku během 2. světové války se Oskar Schindler postupně stává svědomitým a zachraňuje životy více než tisíce židovských uprchlíků.",
                            Director = "Steven Spielberg",
                            ImageFileName = "SchindlersList.jpg",
                            Name = "Schindler's List",
                            ReleaseDate = new DateTime(1993, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            Description = "Příběh Henryho Hilla a jeho života v mafii, který pokrývá jeho vztah s jeho ženou Karen Hill a jeho partnery v zločinu Jimmy Conwayem a Tommy DeVitem.",
                            Director = "Martin Scorsese",
                            ImageFileName = "Goodfellas.jpg",
                            Name = "Goodfellas",
                            ReleaseDate = new DateTime(1990, 9, 19, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            Description = "Epický příběh mafiánské rodiny Corleonů, který sleduje vzestup Michaela Corleona z neochotného outsidera na nemilosrdného mafiánského bosse.",
                            Director = "Francis Ford Coppola",
                            ImageFileName = "Godfather.jpg",
                            Name = "The Godfather",
                            ReleaseDate = new DateTime(1972, 3, 24, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            Description = "Paleontologové jsou pozváni do úžasného tematického parku obydleného vzkříšenými dinosaury, ale brzy zjistí, že bezpečnostní systémy selhávají.",
                            Director = "Steven Spielberg",
                            ImageFileName = "JurassicPark.jpg",
                            Name = "Jurassic Park",
                            ReleaseDate = new DateTime(1993, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            Description = "Mladá agentka FBI hledá pomoc uvězněného kanibala, aby chytila sériového vraha, který stahuje své oběti z kůže.",
                            Director = "Jonathan Demme",
                            ImageFileName = "SilenceOfTheLambs.jpg",
                            Name = "The Silence of the Lambs",
                            ReleaseDate = new DateTime(1991, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            Description = "Epický milostný příběh zasazený do pozadí tragické plavby luxusního parníku Titanic na jeho první a poslední cestě.",
                            Director = "James Cameron",
                            ImageFileName = "Titanic.jpg",
                            Name = "Titanic",
                            ReleaseDate = new DateTime(1997, 12, 19, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            Description = "Mladý hobbit a jeho přátelé se vydávají na nebezpečnou cestu, aby zničili mocný prsten a zachránili Středozem před temným pánem Sauronem.",
                            Director = "Peter Jackson",
                            ImageFileName = "LordOfTheRings.jpg",
                            Name = "The Lord of the Rings",
                            ReleaseDate = new DateTime(2001, 12, 19, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            Description = "Nespokojený úředník vytvoří podzemní bojový klub jako radikální formu psychoterapie, ale věci se vymknou kontrole.",
                            Director = "David Fincher",
                            ImageFileName = "FightClub.jpg",
                            Name = "Fight Club",
                            ReleaseDate = new DateTime(1999, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17,
                            Description = "Tým superhrdinů se musí spojit, aby zachránili Zemi před invazí mimozemšťanů vedenou Lokiho armádou.",
                            Director = "Joss Whedon",
                            ImageFileName = "Avengers.jpg",
                            Name = "The Avengers",
                            ReleaseDate = new DateTime(2012, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 18,
                            Description = "Bývalý římský generál se snaží pomstít vraždu své rodiny tím, že se stane gladiátorem a vyzve zkorumpovaného císaře.",
                            Director = "Ridley Scott",
                            ImageFileName = "Gladiator.jpg",
                            Name = "Gladiator",
                            ReleaseDate = new DateTime(2000, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 19,
                            Description = "Život dozorců na cele smrti je ovlivněn příchodem záhadného vězně s nadpřirozenými schopnostmi léčit.",
                            Director = "Frank Darabont",
                            ImageFileName = "GreenMile.jpg",
                            Name = "The Green Mile",
                            ReleaseDate = new DateTime(1999, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 20,
                            Description = "Tým průzkumníků cestuje červí dírou ve vesmíru v pokusu zajistit přežití lidstva.",
                            Director = "Christopher Nolan",
                            ImageFileName = "Interstellar.jpg",
                            Name = "Interstellar",
                            ReleaseDate = new DateTime(2014, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("CineTrackBE.Models.Entities.FilmGenre", b =>
                {
                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("FilmId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("FilmGenres");

                    b.HasData(
                        new
                        {
                            FilmId = 1,
                            GenreId = 4
                        },
                        new
                        {
                            FilmId = 1,
                            GenreId = 6
                        },
                        new
                        {
                            FilmId = 2,
                            GenreId = 4
                        },
                        new
                        {
                            FilmId = 2,
                            GenreId = 5
                        },
                        new
                        {
                            FilmId = 3,
                            GenreId = 4
                        },
                        new
                        {
                            FilmId = 3,
                            GenreId = 6
                        },
                        new
                        {
                            FilmId = 4,
                            GenreId = 1
                        },
                        new
                        {
                            FilmId = 4,
                            GenreId = 3
                        },
                        new
                        {
                            FilmId = 5,
                            GenreId = 1
                        },
                        new
                        {
                            FilmId = 6,
                            GenreId = 4
                        },
                        new
                        {
                            FilmId = 6,
                            GenreId = 1
                        },
                        new
                        {
                            FilmId = 7,
                            GenreId = 1
                        },
                        new
                        {
                            FilmId = 7,
                            GenreId = 3
                        },
                        new
                        {
                            FilmId = 8,
                            GenreId = 4
                        },
                        new
                        {
                            FilmId = 8,
                            GenreId = 6
                        },
                        new
                        {
                            FilmId = 9,
                            GenreId = 1
                        },
                        new
                        {
                            FilmId = 10,
                            GenreId = 1
                        },
                        new
                        {
                            FilmId = 10,
                            GenreId = 5
                        },
                        new
                        {
                            FilmId = 11,
                            GenreId = 1
                        },
                        new
                        {
                            FilmId = 11,
                            GenreId = 5
                        },
                        new
                        {
                            FilmId = 12,
                            GenreId = 4
                        },
                        new
                        {
                            FilmId = 12,
                            GenreId = 6
                        },
                        new
                        {
                            FilmId = 13,
                            GenreId = 1
                        },
                        new
                        {
                            FilmId = 13,
                            GenreId = 5
                        },
                        new
                        {
                            FilmId = 14,
                            GenreId = 1
                        },
                        new
                        {
                            FilmId = 14,
                            GenreId = 3
                        },
                        new
                        {
                            FilmId = 15,
                            GenreId = 4
                        },
                        new
                        {
                            FilmId = 15,
                            GenreId = 6
                        },
                        new
                        {
                            FilmId = 16,
                            GenreId = 1
                        },
                        new
                        {
                            FilmId = 16,
                            GenreId = 5
                        },
                        new
                        {
                            FilmId = 17,
                            GenreId = 4
                        },
                        new
                        {
                            FilmId = 17,
                            GenreId = 6
                        },
                        new
                        {
                            FilmId = 18,
                            GenreId = 1
                        },
                        new
                        {
                            FilmId = 18,
                            GenreId = 4
                        },
                        new
                        {
                            FilmId = 19,
                            GenreId = 1
                        },
                        new
                        {
                            FilmId = 19,
                            GenreId = 6
                        },
                        new
                        {
                            FilmId = 20,
                            GenreId = 1
                        },
                        new
                        {
                            FilmId = 20,
                            GenreId = 6
                        });
                });

            modelBuilder.Entity("CineTrackBE.Models.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Sci-fi"
                        });
                });

            modelBuilder.Entity("CineTrackBE.Models.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserRating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "AdminRoleId-51sa9-sdd18",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "UserRoleId-54sa9-sda87",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "id-Juzba",
                            RoleId = "AdminRoleId-51sa9-sdd18"
                        },
                        new
                        {
                            UserId = "id-Katka",
                            RoleId = "AdminRoleId-51sa9-sdd18"
                        },
                        new
                        {
                            UserId = "id-Karel",
                            RoleId = "UserRoleId-54sa9-sda87"
                        },
                        new
                        {
                            UserId = "id-Test",
                            RoleId = "AdminRoleId-51sa9-sdd18"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CineTrackBE.Models.Entities.Comment", b =>
                {
                    b.HasOne("CineTrackBE.Models.Entities.ApplicationUser", "Autor")
                        .WithMany("Comments")
                        .HasForeignKey("AutorId");

                    b.HasOne("CineTrackBE.Models.Entities.Comment", "ParrentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParrentCommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CineTrackBE.Models.Entities.Film", "Film")
                        .WithMany("Comments")
                        .HasForeignKey("ParrentCommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Autor");

                    b.Navigation("Film");

                    b.Navigation("ParrentComment");
                });

            modelBuilder.Entity("CineTrackBE.Models.Entities.FilmGenre", b =>
                {
                    b.HasOne("CineTrackBE.Models.Entities.Film", "Film")
                        .WithMany("FilmGenres")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CineTrackBE.Models.Entities.Genre", "Genre")
                        .WithMany("FilmGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("CineTrackBE.Models.Entities.Rating", b =>
                {
                    b.HasOne("CineTrackBE.Models.Entities.Film", "Film")
                        .WithMany("Ratings")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CineTrackBE.Models.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CineTrackBE.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CineTrackBE.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CineTrackBE.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CineTrackBE.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CineTrackBE.Models.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("CineTrackBE.Models.Entities.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("CineTrackBE.Models.Entities.Film", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FilmGenres");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("CineTrackBE.Models.Entities.Genre", b =>
                {
                    b.Navigation("FilmGenres");
                });
#pragma warning restore 612, 618
        }
    }
}
